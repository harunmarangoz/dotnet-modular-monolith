name: services
services:
  modular-monolith.api:
    image: modular-monolith.api:latest
    container_name: modular-monolith.api-container
    build:
      context: .
      dockerfile: Api/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_HTTP_PORTS=80
    ports:
      - "5000:80"
    networks:
      - infrastructures
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
  postgres:
    container_name: postgres
    image: "postgres:latest"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=p@ssw0rd
      - PGDATA= /data/postgres
    volumes:
      - "postgres_data:/data/postgres"
    healthcheck:
      test: pg_isready -U postgres -d postgres
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - infrastructures
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    restart: unless-stopped
    ports:
      - "4369:4369"
      - "5551:5551"
      - "5552:5552"
      - "5672:5672"
      - "25672:25672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=p@ssw0rd
    volumes:
      - "rabbitmq_data:/data/rabbitmq"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - infrastructures
  redis:
    container_name: redis
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass p@ssw0rd
    volumes:
      - "redis_data:/data/redis"
    networks:
      - infrastructures
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:
    driver: local

networks:
  infrastructures:
